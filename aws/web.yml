family: "$ECS_WEB_TASK"
networkMode: awsvpc
cpu: "$ECS_WEB_CPU_UNITS"
memory: "$ECS_WEB_MEMORY_UNITS"
executionRoleArn: "$ROLE_ARN"
taskRoleArn: "$ROLE_ARN"
requiresCompatibilities:
  - FARGATE
ephemeralStorage:
  sizeInGiB: 100
volumes:
  - name: data
    efsVolumeConfiguration:
      fileSystemId: "$EFS_FILESYSTEM_ID"
      authorizationConfig:
        accessPointId: "$EFS_ACCESS_POINT_ID"
        iam: ENABLED
      transitEncryption: ENABLED
containerDefinitions:
  - name: logs
    image: public.ecr.aws/aws-observability/aws-for-fluent-bit:stable
    firelensConfiguration:
      type: fluentbit
      options:
        enable-ecs-log-metadata: "true"
    memoryReservation: 50
    logConfiguration:
      logDriver: awslogs
      options:
        awslogs-group: "/analysistools/$TIER/$APP"
        awslogs-region: "$AWS_REGION"
        awslogs-stream-prefix: logs

  - name: frontend
    image: "$FRONTEND_IMAGE_LATEST"
    portMappings:
      - protocol: tcp
        containerPort: $FRONTEND_CONTAINER_PORT
    environment:
      - name: API_HOST
        value: http://localhost:$BACKEND_CONTAINER_PORT
    secrets:
      - name: SERVER_NAME
        valueFrom: "/analysistools/$TIER/$APP/application_host"
    logConfiguration:
      logDriver: awsfirelens
      options:
        Name: datadog
        tls: "on"
        tls.verify: "off"
        dd_service: "$TIER-$APP-frontend"
        dd_source: "httpd"
        dd_tags: "project:$APP tier:$TIER"
        provider: ecs
      secretOptions:
        - name: Host
          valueFrom: /analysistools/$TIER/datadog/log_endpoint_host
        - name: apikey
          valueFrom: /analysistools/$TIER/datadog/api_key
    memoryReservation: 100

  - name: backend
    image: "$BACKEND_IMAGE_LATEST"
    environment:
      - name: TZ
        value: "America/New_York"
      - name: AWS_REGION
        value: "$AWS_REGION"
      - name: APP_NAME
        value: "$APP"
      - name: SERVER_PORT
        value: "$BACKEND_CONTAINER_PORT"
      - name: WORKER_TYPE
        value: "fargate"
      - name: LOG_LEVEL
        value: "$LOG_LEVEL"
    secrets:
      - name: EMAIL_ADMIN
        valueFrom: "/analysistools/$TIER/$APP/email_admin"
      - name: EMAIL_SENDER
        valueFrom: "/analysistools/$TIER/$APP/email_sender"
      - name: EMAIL_BASE_URL
        valueFrom: "/analysistools/$TIER/$APP/base_url"
      - name: SESSION_FOLDER
        valueFrom: "/analysistools/$TIER/$APP/session_folder"
      - name: VPC_ID
        valueFrom: "/analysistools/$TIER/$APP/vpc_id"
      - name: SUBNET_IDS
        valueFrom: "/analysistools/$TIER/$APP/subnet_ids"
      - name: SECURITY_GROUP_IDS
        valueFrom: "/analysistools/$TIER/$APP/security_group_ids"
      - name: ECS_CLUSTER
        valueFrom: "/analysistools/$TIER/$APP/ecs_cluster"
      - name: WORKER_TASK_NAME
        valueFrom: "/analysistools/$TIER/$APP/worker/ecs_task"
    mountPoints:
      - sourceVolume: data
        containerPath: "/data"
        readOnly: false
    logConfiguration:
      logDriver: awsfirelens
      options:
        Name: datadog
        tls: "on"
        tls.verify: "off"
        dd_service: "$TIER-$APP-backend"
        dd_source: "nodejs"
        dd_tags: "project:$APP tier:$TIER"
        provider: ecs
      secretOptions:
        - name: Host
          valueFrom: /analysistools/$TIER/datadog/log_endpoint_host
        - name: apikey
          valueFrom: /analysistools/$TIER/datadog/api_key
tags:
  - key: Project
    value: "$APP"
  - key: ResourceName
    value: "$TIER-$APP-web-ecs-task"
  - key: EnvironmentTier
    value: "$ENVIRONMENT_TIER"
  - key: ResourceFunction
    value: compute
  - key: Creator
    value: CF
