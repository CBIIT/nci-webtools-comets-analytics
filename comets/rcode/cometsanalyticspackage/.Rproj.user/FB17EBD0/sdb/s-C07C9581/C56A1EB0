{
    "collab_server" : "",
    "contents" : "library(CometsAnalyticsPackage)\n\n# load the cohort and  metadata into a list for use in analyses, eventually from ewy's QC\n#cohort.data<-readData()\n\n#load(\"uids.Rda\")\n\n\n# print debug time\nprdebug<-function(lab,x){\n  print(paste(lab,\" = \",x,\" Time: \",Sys.time()))\n}\ndobug<-FALSE\n\n#################################################################################\n#\n# Fix dataframe from excel -----------------------------------------------------\n#\n#################################################################################\nfixData <- function(dta) {\n  # run through the data\n  colnames(dta) <- tolower(colnames(dta))\n\n  # remove rows that have all NAs (EM)\n  countnas=as.numeric(apply(data.frame(dta),1,function(x) length(which(is.na(x)))))\n  if (length(which(countnas==ncol(dta)))>0) {\n  \tdta=dta[-c(which(countnas==ncol(dta))),]\n  }\n\n  cls <- sapply(dta, class)\n  # do conversions for data types: integer to numeric and dates are identified by date in name\n\n  if (length(which(cls == \"integer\")) > 0) {\n    for (ind in which(cls == \"integer\"))\n      dta[,ind] <- as.numeric(dta[,ind])\n  }\n\n  if (length(which(cls == \"factor\")) > 0) {\n    for (ind in which(cls == \"factor\"))\n      dta[,ind] <- as.character(dta[,ind])\n  }\n#\n#   # do conversions for data types:  dates are identified by finding string date in name\n#   if (length(grep(\"date\",colnames(dta))) > 0) {\n#     for (ind in grep(\"date\",colnames(dta))) {\n#       if (length(grep(\".xpt\", inFile,ignore.case = TRUE)) > 0) {\n#         dta[,ind] <- as.Date(dta[,ind], origin = \"1960-01-01\")\n#       }else{\n#         dta[,ind] <- as.Date(dta[,ind])\n#       }\n#\n#     }\n#  }\n\n  return(dta)\n}\n\n#################################################################################\n# Get metabolite statistics (# missing values, variance)\n#################################################################################\nGetMetabStats <- function(dtalist) {\n\t#toremove=as.numeric(lapply(c(mydat$allSubjectMetaData,mydat$subjId),\n\t#\tfunction(x) which(colnames(mydat$subjdata)==x)))\n\t#mymets=colnames(mydat$subjdata)[-c(toremove)]\n\n\tmymets=dtalist$metab[[dtalist$metabId]]\n\tlog2metvar=as.numeric(lapply(mymets, function(x) {\n\t\ttemp=which(colnames(dtalist$subjdata)==x)\n\t\tif(length(temp)==0) {return(NA)}\n\t\telse return(var(log2(dtalist$subjdata[[x]])))\n\t}))\n\tnummissing=as.numeric(lapply(mymets, function(x) {\n\t\ttemp=which(colnames(dtalist$subjdata)==x)\n\t\tif(length(temp)==0) {return(NA)}\n\t\telse return(length(which(dtalist$subjdata[[x]]==min(dtalist$subjdata[[x]])))-1)\n\t}))\n\n\tdtalist$metab$log2var=log2metvar\n\tdtalist$metab$nummissing=nummissing\n\treturn(dtalist)\n}\n\n#################################################################################\n# Harmonize Metabolites (for correlation tab, internal function)\n#################################################################################\nHarmonize <- function(dtalist) {\n        masteruids=read.delim(\"uid.csv\",sep=\",\",header=T,fileEncoding=\"latin1\")\n        mycols=c(which(colnames(masteruids)==\"UID_01\"),\n                which(colnames(masteruids)==\"BIOCHEMICAL\"),grep(\"_NAME\", colnames(masteruids)))\n  #      print(\"Using columns: \",mycols)\n\n        #resharm=Harmonizeids(metametab=dtalist$metab, mycols, masteruids)\n        metametab=dtalist$metab\n        if (is.null(metametab)) {return(NULL)}\n        else {\n        harmflag=cohortfound=multrows=othercohortfound=myuids=otheruids=as.vector(rep(NA,nrow(metametab)))\n        harmind=c()\n        metabcol=1\n        response=0\n    repeat {\n        response=length(which(harmflag==\"N\"))+length(which(is.na(harmflag)))\n #       print(paste(\"response:\",response,\"metabcol:\",metabcol))\n\n    if (response > 0 && metabcol<=ncol(metametab)) {\n        metabcol=metabcol+1\n#        print(paste(\"Going through column\",metabcol))\n        mymetabs=metametab[[metabcol]]\n        for (i in 1:length(mymetabs)) {\n          # Get rows where name columns match the input metabolite name (i)\n           temp=as.character(lapply(mycols,function(x)\n                paste(unique(which(tolower(as.character(masteruids[,x]))==tolower(as.character(mymetabs[i])))),sep=\";\",collapse=\";\")\n                ))\n           myrows=setdiff(unique(strsplit(paste(temp,sep=\";\",collapse=\";\"),\";\")[[1]]),\"\")\n           if (length(myrows)==0) {harmflag[i]=\"N\"}\n           else {harmflag[i]=\"Y\";multrows[i]=\"N\"}\n           cohortfound[i]=paste(colnames(masteruids)[which(masteruids[myrows[1],mycols]==tolower(mymetabs[i]))],sep=\";\",collapse=\";\")\n           myuids[i]=as.character(masteruids[myrows[1],\"UID_01\"])\n           if(length(myrows)>1) {\n                for (j in 2:length(myrows)) {\n                        multrows[i]=\"Y\"\n                        othercohortfound[i]=paste(othercohortfound[i],\n                                paste(colnames(masteruids)[which(tolower(unlist(masteruids[myrows[j],mycols]))==tolower(mymetabs[i]))],sep=\";\",collapse=\";\"),\n                                sep=\";\")\n                        otheruids[i]=paste(otheruids[i],paste(masteruids[myrows[j],\"UID_01\"],sep=\";\",collapse=\";\"),sep=\";\")\n                }\n                # Remove prefix \"__\"\n                othercohortfound[i]=sub(\"NA;\",\"\",othercohortfound[i])\n\t\tothercohortfound[i]=unique(paste(unlist(strsplit(othercohortfound[i],\"__\"))),sep=\";\")\n                otheruids[i]=sub(\"NA;\",\"\",otheruids[i])\n\t\totheruids[i]=unique(paste(unlist(strsplit(otheruids[i],\"__\"))),sep=\";\")\n          }\n\n        }\n        } else{break;}\n        }\n        dtalist$metab$Harmonized=harmflag\n        dtalist$metab$UID_01=myuids\n        dtalist$metab$cohort_platform=cohortfound\n        dtalist$metab$UID_other=otheruids\n        dtalist$metab$cohort_other=othercohortfound\n        dtalist$metab$multrows=multrows\n        return(dtalist)\n        }\n}\n\n\n#################################################################################\n# Integrity check of input Excell file\n#################################################################################\nCheckIntegrity <-\n  function (dta.metab,dta.smetab, dta.sdata,dta.vmap) {\n    # dta.metab = metabolite meta data (sheet 1)\n    # dta.smetab = abundance data (sheet 2)\n    # dta.sdata = subject meta data (sheet 3)\n    # dta.vmap = variable mapping data (sheet 4)\n\n    # get the cohort equivalent of metabolite_id and subject id\n    metabid = tolower(dta.vmap$cohortvariable[tolower(dta.vmap$varreference) == \"metabolite_id\"])\n    subjid = dta.vmap$cohortvariable[tolower(dta.vmap$varreference) == 'id']\n #   print(paste(\"metabid\",metabid))\n #    print(paste(\"subjid\",subjid))\n    outmessage = c()\n    if (length(metabid) == 0) {\n      outmessage = \"Error: metabid is not found as a parameter in VarMap sheet!  Specify which column should be used for metabolite id\"\n    }\n    else if (length(subjid) == 0) {\n      outmessage = c(\n        outmessage,\"Error: id (for subject id) is not found as a parameter in VarMap sheet!  Specify which column should be used for subject id\"\n      )\n    }\n    else {\n      dta.metab[[metabid]] = tolower(dta.metab[[metabid]])\n      dta.sdata[[subjid]] = tolower(dta.sdata[[subjid]])\n      dta.smetab[[subjid]] = tolower(dta.smetab[[subjid]])\n      if (length(grep(metabid,colnames(dta.metab))) == 0) {\n        outmessage = c(\n          outmessage,\"Error: Metabolite ID from 'VarMap Sheet' (\",metabid,\") does not match column name from 'Metabolites Sheet'\"\n        )\n      }\n      else if (length(grep(subjid,colnames(dta.sdata))) == 0) {\n        outmessage = c(\n          outmessage,\"Error: Sample ID from 'VarMap Sheet' (\",subjid,\") does not match a column name in 'SubjectData Sheet'\"\n        )\n      }\n      else if (length(unique(dta.sdata[,subjid])) != length(unique(dta.smetab[,subjid]))) {\n        outmessage = c(\n          outmessage,\"Warning: Number of subjects in SubjectData sheet does not match number of subjects in SubjectMetabolites sheet\"\n        )\n      }\n      else if (length(unique(colnames(dta.smetab))) != ncol(dta.smetab)) {\n        outmessage = c(\n          outmessage,\"Warning: Metabolite abundances sheet (SubjectMetabolites) contains duplicate columns (metabolite names)\"\n        )\n      }\n      else if (length(unique(unlist(dta.sdata[,subjid]))) != nrow(dta.sdata)) {\n        outmessage = c(\n          outmessage,\"Warning: Sample Information sheet (SubjectData) contains duplicate ids\"\n        )\n      }\n      else if (length(unique(unlist(dta.metab[,metabid]))) != nrow(dta.metab)) {\n        outmessage = c(\n          outmessage,\"Warning: Metabolite Information sheet (Metabolites) contains duplicate metabolite ids\"\n        )\n      }\n\n      else {\n        nummetab = length(unique(colnames(dta.smetab)[-c(which(colnames(dta.smetab) ==\n                                                                 subjid))]))\n        numsamples = length(unique(dta.smetab[[subjid]]))\n        if (length(intersect(as.character(unlist(dta.metab[,metabid])),colnames(dta.smetab)[-c(which(colnames(dta.smetab) ==\n                                                                                                     subjid))])) == nummetab &&\n            length(intersect(as.character(unlist(dta.sdata[,subjid])),dta.smetab[[subjid]])) ==\n            numsamples) {\n          outmessage = c(\n            outmessage,\"Passsed all integrity checks, analyses can proceed. If you are part of COMETS, please download metabolite list below and submit to the COMETS harmonization group.\"\n          )\n        }\n        else {\n          if (length(intersect(tolower(dta.metab[[metabid]]),tolower(colnames(dta.smetab)))) !=\n              nummetab) {\n            outmessage = c(\n              outmessage,\"Error: Metabolites in SubjectMetabolites DO NOT ALL match metabolite ids in Metabolites Sheet\"\n            )\n          }\n          if (length(intersect(dta.sdata[[subjid]],dta.smetab[[subjid]])) !=\n              numsamples) {\n            outmessage = c(\n              outmessage,\"Error: Sample ids in SubjectMetabolites DO NOT ALL match subject ids in SubjectData sheet\"\n            )\n          }\n        }\n      }\n    }\n    if (is.null(outmessage)) {\n      outmessage = \"Input data has passed QC (metabolite and sample names match in all input files)\"\n    }\n\n    return(\n      list(\n        dta.smetab = dta.smetab,dta.metab = dta.metab, dta.sdata = dta.sdata,outmessage =\n          outmessage\n      )\n    )\n  }\n\n\n\n#################################################################################\n#\n# Shiny functions          -----------------------------------------------------\n#\n#################################################################################\nshinyServer(function(input, output,session) { # EM added session here to automatically populate dropdown menu\n  # Function for individual cohort correlations -------------------------------\n\n\n\n#   output$contents <- renderPrint({\n#     summary(readData()[[1]])\n#   })\n\n\n\n\n  #----------------------------------------------------------------\n  # read data from excel file\n  #----------------------------------------------------------------\n  readData <- reactive({\n    # input$file1 will be NULL initially. After the user selects\n    # and uploads a file, it will be a data frame with 'name',\n    # 'size', 'type', and 'datapath' columns. The 'datapath'\n    # column will contain the local filenames where the data can\n    # be found.\n\n    inFile <- input$file1\n\n    if (length(inFile)==0)\n      return(NULL)\n\n    else if (length(grep(\".xlsx\", input$file1, ignore.case = TRUE)) > 0) {\n      xlfile <- input$file1\n\n      file.rename(xlfile$datapath,\n                paste(xlfile$datapath, \".xlsx\", sep=\"\"))\n      dta.metab<-fixData(read_excel(paste(xlfile$datapath, \".xlsx\", sep=\"\"), 1)) #metabolite meta data\n      dta.smetab<-fixData(read_excel(paste(xlfile$datapath, \".xlsx\", sep=\"\"), 2)) #subject metabolite data\n      dta.sdata<-fixData(read_excel(paste(xlfile$datapath, \".xlsx\", sep=\"\"), 3)) #subject data\n      dta.vmap<-fixData(read_excel(paste(xlfile$datapath, \".xlsx\", sep=\"\"), 4)) #variable mapping\n      dta.models<-fixData(read_excel(paste(xlfile$datapath, \".xlsx\", sep=\"\"), 5)) #batch model specifications\n      }\n\n  # convert metabolite_id names to lower case\n  #  dta.metab$metabolite_id <- tolower(dta.metab$metabolite_id)\n\n\n\n  # Check file integrity:\n    ckintegrity=CheckIntegrity(dta.metab=dta.metab,dta.smetab=dta.smetab,\n                               dta.sdata=dta.sdata,dta.vmap=dta.vmap)\n    integritymessage=ckintegrity$outmessage\n    dta.metab=ckintegrity$dta.metab\n    dta.smetab=ckintegrity$dta.smetab\n    dta.sdata=ckintegrity$dta.sdata\n    #print(\"Printing Integrity Message:\")\n    #print(integritymessage)\n\n# If an error was found during integrity check (e.g. not all metabolites or subjects in the SubjectMetabolite sheet are annotated in the respective metadatasheets Subjects and Metabolites), then return only integrity check\n    if (length(grep(\"Error\", ckintegrity$outmessage))>0) {\n\t       dtalist=list(integritymessage=integritymessage,mods=dta.models) }\n    else {\n      dta <- inner_join(dta.sdata, dta.smetab)\n\n      idvar<-dta.vmap$cohortvariable[dta.vmap$varreference == 'id']\n      metabvar<-tolower(dta.vmap$cohortvariable[dta.vmap$varreference == \"metabolite_id\"])\n\n\n     #rename variables if batch mode so we can run models\n    if (input$modelspec == 'Batch') {\n      # take only vars that are named differently for the cohort\n      tst<-dplyr::filter(dta.vmap,!is.na(cohortvariable) & varreference != \"metabolite_id\")\n\n      newnames <- mapvalues(names(dta),\n                            from = c(tolower(tst$cohortvariable)),\n                            to = c(tolower(tst$varreference)))\n\n      names(dta) <- newnames\n\n      newnames <- mapvalues(names(dta),\n                            from = c(tolower(tst$cohortvariable)),\n                            to = c(tolower(tst$varreference)))\n\n      names(dta) <- newnames\n\n#       #rename cohort metabid to metabolite id\n#       names(dta.metab)<-mapvalues(names(dta.metab),from=metabvar,to=\"metabolite_id\")\n    }\n\n    #put metabolite list in lower case\n   # dta.metab$metabolite_id<-tolower(dta.metab$metabolite_id)\n\n    # run through all vmap specifications to create variables\n\n    # Create list for output\n    # 1 = subj data - subjdata (metabolite abundances)\n    # 2 = metabolite var list - allMetabolites\n    # 3 = subjectID variable subjId\n    # 4 = metabolite metadata\n    # 5 = models\n    dtalist <- list(\n      subjdata = dta,\n      allMetabolites = names(dta.smetab)[-1],\n      allSubjectMetaData = names(dta.sdata)[-1],\n      allSubjects = dta.sdata[,idvar],\n      subjId = idvar,\n      metabId = metabvar,\n      metab = dta.metab,\n      mods = dta.models,\n      integritymessage=integritymessage\n    )\n#    print(paste(\"end of readdata\",Sys.time()))\n    } # end else integritycheck doesn't contain error\n\n     # harmonize dtalist metabolite IDs with COMETS' uid.csv\n     #harmdtalist=Harmonize(dtalist)\n\n     # Get filtering parameters for metabolites (variance, # missing values)\n\n    return(dtalist)\n  })\n\n\n\n\n\n  #----------------------------------------------------------------\n  # establish working data\n  #----------------------------------------------------------------\n  getData <- reactive({\n    if (dobug)\n      prdebug(\"Start getdata:\",NULL)\n    if (length(input$modelspec)==0)\n      return(NULL)\n\n    if (input$modelspec == \"Interactive\") {\n      # adjust the variable names\n      # found all metabolites\n      if (!is.na(match(\"All metabolites\",input$rowvars)))\n        rcovs <-\n          unique(c(input$rowvars[input$rowvars != \"All metabolites\"],c(readData()[[2]])))\n      else\n        rcovs <- input$rowvars\n\n\n      if (!is.na(match(\"All metabolites\",input$colvars)))\n        ccovs <-\n          unique(c(input$colvars[input$colvars != \"All metabolites\"],c(readData()[[2]])))\n      else\n        ccovs <- input$colvars\n\n      acovs <- input$adjvars\n    }\n    else if (input$modelspec == \"Batch\") {\n      # here we need to get the covariates defined from the excel sheet\n      # step 1. get the chosen model first\n\n\n      mods<-dplyr::filter(as.data.frame(readData()[[\"mods\"]]),model==input$modbatch)\n        if (length(mods)>0 & mods$outcomes==\"All metabolites\")\n          rcovs<-c(readData()[[2]])\n        else\n          rcovs<-as.vector(strsplit(mods$outcomes,\" \")[[1]])\n\n        if (length(mods)>0 & mods$exposure==\"All metabolites\")\n          ccovs<-c(readData()[[2]])\n        else\n          ccovs<-as.vector(strsplit(mods$exposure,\" \")[[1]])\n\n        if (!is.na(mods$adjustment))\n          acovs<-as.vector(strsplit(mods$adjustment,\" \")[[1]])\n        else acovs<-NULL\n\n\n\n\n\n    }\n\n    if (dobug)\n      prdebug(\"Set up columvars:\",input$modelspec)\n    # merge smetab\n    if (length(acovs) == 0){\n      gdta <-\n        subset(as.data.frame(readData()[[1]]),select = c(ccovs,rcovs))\n    }\n    else {\n      gdta <-\n        subset(as.data.frame(readData()[[1]]),select = c(acovs,ccovs,rcovs))\n    }\n\n    # list for subset data\n    # 1: subset data: gdta\n    # 2: column variables: ccovs\n    # 3: row variables: rcovs\n    if (dobug)\n      prdebug(\"End of getdata:\",dim(gdta))\n    list(gdta = gdta,ccovs = ccovs,rcovs = rcovs,acovs=acovs)\n\n  })\n\n\n\n\n\n\n  #----------------------------------------------------------------\n  # save as Csv file\n  #----------------------------------------------------------------\n  output$downloadData <- downloadHandler(\n\n    filename = function() {\n\n\n      fname = gsub('.','_',tolower(input$cohort), fixed = TRUE)\n      paste(fname,'corr',Sys.Date(),'.csv',sep = '')\n    },\n    content = function(file) {\n      write.csv(getCorr(), file)\n    }\n  )\n\n\n  output$heatPlot <-  renderPlotly({\n    validate(\n      need(length(input$file1)>0, \" \")\n    )\n\n    ccorrmat <- getCorr()\n\n    # order the rows according to sort by\n    if (input$sortby==\"metasc\")\n      ccorrmat$metabolite_name <-\n        factor(ccorrmat$metabolite_name,levels =\n                 ccorrmat$metabolite_name[rev(order(unlist(ccorrmat[\"metabolite_name\"])))])\n    else\n    ccorrmat$metabolite_name <-\n      factor(ccorrmat$metabolite_name,levels = ccorrmat$metabolite_name[order(unlist(ccorrmat[input$sortby]))])\n\n    # stack the correlations together\n    ccorrmat <- ccorrmat[order(ccorrmat$metabolite_name), ]\n    gather(ccorrmat,\"covariate\",\"corr\",1:length(getData()[[2]]))%>%\n    plot_ly(z = corr,\n            x = covariate, y = metabolite_name,\n            type = \"heatmap\",\n            colorbar = list(title = \"Correlation\")) %>%\n      layout(p,\n             margin = list(l = 200),\n        title = \" \",      # layout's title: /r/reference/#layout-title\n        xaxis = list(           # layout's xaxis is a named list.\n          title = \" \",       # xaxis's title: /r/reference/#layout-xaxis-title\n          showgrid = F          # xaxis's showgrid: /r/reference/#layout-xaxis\n        ),\n        yaxis = list(           # layout's yaxis is a named list.\n          title = \" \"        # yaxis's title: /r/reference/#layout-yaxis-title\n        )\n        ,\n        legend = list(           # layout's yaxis is a named list.\n          title = \"Correlation\"        # yaxis's title: /r/reference/#layout-yaxis-title\n        ))\n\n#    dtaView\n  })\n\n  output$networkPlot <- renderPlot({\n    validate(\n      need(length(input$file1)>0, \"Please input Excel file on the left panel.\")\n    )\n\n    pc = ggm.estimate.pcor(getData()[[1]])\n\n    edges = network.test.edges(pc,\n                               direct = FALSE,\n                               fdr = TRUE,\n                               plot = FALSE)\n\n    net = extract.network(edges,cutoff.ggm = input$cutggm)\n\n    set.seed(1)\n    labels <- colnames(getData()[[1]])\n\n    igNet = network.make.graph(net,labels,drop.singles = TRUE)\n\n    attrs <-\n      list(\n        node = list(\n          shape = \"ellipse\", fixedsize = FALSE,fillcolor = \"darkblue\",fontcolor =\n            \"white\"\n        )\n      )\n    plot(igNet, \"fdp\",attrs = attrs)\n\n  })\n\n\n#######################\n# Output integrity check message (Integrity Check) (EM)\n######################\noutput$IntegrityMessage <- renderUI({\n\tvalidate(\n\t  need(!is.null(readData()), \"Please input Excel file on the left panel\")\n\t)\n  mydat=readData()\n  return(HTML(paste(\"<div class='rcorners1'>\",mydat$integritymessage,\"</div>\")))\n# \tif(is.null(mydat)) {\n# \t\t\"Please input Excel file on the left panel\"\n# \t}\n#         else {readData()$integritymessage}\n})\n\n\n\n#######################\n# Output integrity check message (Integrity Check) (EM)\n######################\noutput$CorrelateMessage <- renderUI({\n  validate(\n    need(!is.null(readData()), \"Please input Excel file on the left panel\")\n  )\n  return(HTML(paste(\"<div class='rcorners1'>Correlation analyses successful. Please download the file below to the COMETS harmonization group for meta-analysis.</div>\")))\n  # \tif(is.null(mydat)) {\n  # \t\t\"Please input Excel file on the left panel\"\n  # \t}\n  #         else {readData()$integritymessage}\n})\n\n\n#######################\n# Output # subjects, # metabolites from input Excell sheet (Integrity Check) (EM)\n#######################\noutput$InputFilesStats <- renderTable({\n  validate(\n    need(!is.null(readData()), \" \")\n  )\n  resdf<-data.frame(Num_Metabolites_Sheet1=paste(length(readData()$metab[[readData()$metabId]]),\"metabolites\"),\n                    Num_Samples2_Sheet3=paste(length(readData()$allSubjects[[readData()$subjId]]),\"subjects\"),\n                    Size_Data_Sheet2=paste(nrow(readData()$subjdata),\" subjects with \",\n                                           ncol(readData()$subjdata)-length(readData()$allSubjectMetaData)-1,\n                                           \" metabolites\",sep=\"\"))\n  colnames(resdf)<-c(\"Metabolites sheet\",\"Subject data sheet\",\"Subject metabolites sheet\")\n           return(resdf)\n#         }\n},\ncaption=\"Input Data Summary\",\ncaption.placement = getOption(\"xtable.caption.placement\", \"top\"),\ninclude.rownames = FALSE\n)\n\n#######################\n# Output number of harmonized/non-harmonized metabolites (Integrity Check) (EM)\n#######################\noutput$HarmStats <- renderTable({\n  validate(\n    need(!is.null(readData()), \" \")\n  )\n\n# \tmylist=readData()\n# \tif (is.null(mylist)) {return(NULL)}\n# \telse {\n\tmylistharm=Harmonize(readData())\n\tmydat=GetMetabStats(mylistharm)\n# \tif (is.null(mydat$subjdata))\n#              return(data.frame(Status=\"Nothing To Report; Check error above\"))\n#         else {\n\t   nummets=nrow(mydat$metab)\n\t   resdf<-data.frame(Total_Metabolites_ForAnalysis=nummets,\n\t                     Total_Harmonized=length(which(!is.na(mydat$metab$UID_01))),\n\t                     Total_NonHarmonized=length(which(is.na(mydat$metab$UID_01))))\n\t   colnames(resdf)<-c(\"N Metabolites\",\"N Harmonized\",\"N Non-Harmonized\")\n\t   return(resdf)\n# \t}\n# \t}\n},\ncaption=\"Harmonization Summary\",\ncaption.placement = getOption(\"xtable.caption.placement\", \"top\"),\ninclude.rownames = FALSE\n)\n\n\n#######################\n# Output plots that summarize variance and number of missing values (Integrity Check) (EM)\n#######################\noutput$MetabForAnalysisStats <- renderPlot({\n  output$plotDone <<- renderUI({tags$input(type=\"hidden\", value=\"TRUE\")})\n\n\tmylist=readData()\n        if (is.null(mylist)) {return(NULL)}\n\telse {\n        mylistharm=Harmonize(mylist)\n        mydat=GetMetabStats(mylistharm)\n\tif (is.null(mydat$subjdata))\n             return(NULL)\n\telse {\n\t\tpar(mfrow=c(1,2))\n\t\thist(mydat$metab$log2var,main=\"Log2 Variance Distribution\",breaks=200,xlab=\"log2 Variance\")\n\t\thist(mydat$metab$nummissing,main=\"Missing Values\",breaks=200,xlab=\"Number of missing values\")\n\t}\n\t}\n})\n\n#######################\n# Download list of harmonized metabolites (Integriy Check) (EM)\n#######################\noutput$downloadharmmetab <- downloadHandler(\n        filename=paste0(input$cohort,Sys.Date(),\"Harmonization.csv\"),\n        content=function(file){\n                mylist=readData()\n                mydat=Harmonize(mylist)\n                if (is.null(mydat$metab))\n                        return(NULL)\n                else {\n                write.csv(mydat$metab,quote=F,row.names=F,file=file)\n                }\n        }\n)\n\n\n\n  # G\n  getCorr <- reactive({\n\n\n    validate(\n      need(!is.null(getData()), \" \")\n    )\n\n\n    # get correlation matrix\n    col.rcovar <- match(getData()[[3]],names(getData()[[1]]))\n\n    # column indices of column covariates\n    col.ccovar <- match(getData()[[2]],names(getData()[[1]]))\n\n\n    # column indices of adj-var\n    col.adj <- match(getData()[[4]],names(getData()[[1]]))\n\n\n\n    if (length(col.adj)==0) {\n      print(\"running unadjusted\")\n      data<-getData()[[1]][,c(col.rcovar,col.ccovar)]\n      # calculate unadjusted spearman correlation matrix\n#       names(data)<-paste0(\"v\",1:length(names(data)))\n      if (dobug)\n        prdebug(\"start corr\",length(getData()))\n      corr<-cor(data,method = \"spearman\")\n      if (dobug)\n        prdebug(\"end corr\",NULL)\n      corr <- data.frame(corr[1:length(col.rcovar),-(1:length(col.rcovar))])\n\n      # calculate complete cases matrix\n      n  <-\n        matrix(NA,nrow = length(col.rcovar),ncol = length(col.ccovar))\n      for (i in 1:length(col.rcovar)) {\n        for (j in 1:length(col.ccovar)) {\n          n[i,j] <- sum(complete.cases(data[,c(col.rcovar[i],col.ccovar[j])]))\n        }\n      }\n    }\n    else {\n      # calculate partial correlation matrix\n      print(\"running adjusted\")\n#      corr <-\n#        pcor.test(data[,col.rcovar],data[,col.ccovar], data[,col.adj],method=\"spearman\")\n      dtarank<-as.data.frame(apply(getData()[[1]],2,rank))\n\n      #filter columns with 0 variance\n      # take out indices with - variance\n      #which(apply(dtarank,2,var)==0,arr.ind = T)\n\n\n      corr <-partial.r(dtarank,c(col.rcovar,col.ccovar),col.adj)\n      corr<-as.data.frame(corr[1:length(col.rcovar),-(1:length(col.rcovar))])\n      #corr <-corr.p(data,c(col.rcovar,col.ccovar), col.adj,method=\"spearman\")\n      #corr<-corr$estimate[1:length(col.rcovar),-(1:length(col.rcovar))]\n      # calculate complete cases matrix\n      n  <-\n        matrix(NA,nrow = length(col.rcovar),ncol = length(col.ccovar))\n      n  <-\n        matrix(NA,nrow = length(col.rcovar),ncol = length(col.ccovar))\n      for (i in 1:length(col.rcovar)) {\n        for (j in 1:length(col.ccovar)) {\n          n[i,j] <- sum(complete.cases(dtarank[,c(col.rcovar[i],col.ccovar[j],col.adj)]))\n        }\n      }\n\n\n    }\n    colnames(corr) <- as.character(getData()[[2]])\n#     rownames(corr) <- as.character(getData()[[3]])\n    colnames(n) <- paste(as.character(getData()[[2]]),\".n\",sep = \"\")\n    ttval<-sqrt(n-length(col.adj)-2)*corr/sqrt(1-corr**2)\n    pval<-sapply(abs(ttval),pt,df=tn-length(col.adj)-2,lower.tail=FALSE)*2\n    colnames(pval) <- paste(as.character(getData()[[2]]),\".p\",sep = \"\")\n\n\n    # combine the two matrices together as data frame\n    corr <- fixData(data.frame(round(corr,digits=3),\n                       n,\n                       pval,\n                       metabolite_id=rownames(corr),\n                       model=ifelse(input$modelspec=='Interactive',input$model,input$modbatch),\n                       cohort=input$cohort,\n                       adjvars=ifelse(length(col.adj)==0,\"None\",paste(getData()[[4]],collapse = \" \"))))\n\n\n\n    ccorrmat <- dplyr::select(inner_join(corr,Harmonize(readData())$metab,by=c(\"metabolite_id\"=readData()$metabId)),-metabolite_id)\n\n    ccorrmat\n  })\n\n\n\n\n  # Render heatmap of correlations-------------------------\n\n  # ccorrmat$metabolite <- with(ccorrmat, reorder(metabolite,input$sortby))\n#   testcorg <- reactive({\n#     gather(getCorr(),\"covariate\",\"corr\",1:length(input$xvars))\n#\n#     testcorg %>%\n#       ggvis( ~ covariate, ~ metabolite,fill =  ~ corr) %>%\n#       layer_rects(width = band(), height = band()) %>%\n#       layer_text(\n#         x = prop(\"x\", ~ covariate, scale = \"xcenter\"),\n#         y = prop(\"y\", ~ metabolite, scale = \"ycenter\")\n#         #  text: =  ~ Freq, fontSize: = 20, fill: = \"white\", baseline: =\n#         #    \"middle\", align: = \"center\"\n#       ) %>%\n#       scale_nominal(\"x\", padding = 0, points = FALSE) %>%\n#       scale_nominal(\"y\", padding = 0, points = FALSE) %>%\n#       scale_nominal(\"x\", name = \"xcenter\", padding = 1, points = TRUE) %>%\n#       scale_nominal(\"y\", name = \"ycenter\", padding = 1, points = TRUE) %>%\n#       bindshiny(\"ggvis\")\n#\n#   })\n\n\n  # Choose sorting option --------------------------------------\n  output$selectSort <- renderUI({\n    validate(\n      need(length(input$file1)>0, \"Please input Excel file on the left panel\")\n    )\n\n\n    # x-var should be numeric only...\n    nms <- c(getData()[[2]])\n\n    if (is.null(labs)) {\n      NULL\n    }else{\n      selectInput(\n        \"sortby\", label = \"Select sort:\",\n        choices = c(\"Alphabetic (asc)\" = \"metasc\",\"Alphabetic (desc)\" = \"metabolite_name\",nms)\n      )\n    }\n  })\n\n\n  # output choice for adjusted vars\n  output$xvars <- renderUI({\n    # Look through the data...\n    validate(\n      need(length(input$file1)>0, \" \")\n    )\n\n\n    if (is.null(labs)) {\n      NULL\n    }else{\n      list(\n        selectizeInput(\n          \"rowvars\", label = \"  Select outcomes(s):\",\n          choices = c(\"All metabolites\",colnames(readData()[[1]])), multiple = TRUE,\n          selected = \"All metabolites\"\n        ),\n        selectizeInput(\n          \"colvars\", label = \"  Select exposures(s):\",\n          choices = c(\"All metabolites\",colnames(readData()[[1]])), multiple = TRUE\n\n        ),\n        selectizeInput(\n          \"adjvars\", label = \"  Adjusted covariates:\",\n          choices = c(colnames(readData()[[1]])), multiple = TRUE\n        )\n      )\n    }\n\n  })\n\n  # output choice for model if batch mode\n  output$xmods <- renderUI({\n    # Look through the data...\n\n\n    modchoices<-as.data.frame(readData()[[\"mods\"]])\n    if (is.null(names(modchoices)) & input$modelspec == 'Batch') {\n      NULL\n    }else{\n\n      selectInput(\n        \"modbatch\", label = \"  Choose model:\",\n        c(as.character(modchoices$model))\n      )\n    }\n\n  })\n\n\n\n  # get the models to choose from\n  # output choice for adjusted vars\n  output$modelopts <- renderUI({\n    # Look through the data...\n\n\n    if (length(labs)==0) {\n      NULL\n    }else{\n      list(\n        selectInput(\n          \"modopts\", label = \"  Choose model:\",\n          choices = c(\"All metabolites\",colnames(readData()[[1]])), multiple = TRUE\n        ),\n        selectizeInput(\n          \"colvars\", label = \"  Outcomes:\",\n          choices = c(\"All metabolites\",colnames(readData()[[1]])), multiple = TRUE\n        ),\n        selectizeInput(\n          \"adjvars\", label = \"  Adjusted covariates:\",\n          choices = c(colnames(readData()[[1]])), multiple = TRUE\n        )\n      )\n    }\n\n  })\n\n\n  output$correlate <- renderDataTable({\n    if (length(input$file1)==0)\n      return(\"Waiting for input\")\n\n    if (length(getCorr())==0)\n      return(NULL)\n\n    #tabulate findings, those with biochemical = NA did not find a match\n    dplyr::select(getCorr(),-cohort_platform,-cohort_other,-multrows)\n  })\n\n  output$cheatmap <- renderD3heatmap({\n    validate(\n      need(length(input$file1)>0, \"Please input Excel file on the left panel.\")\n    )\n\n    validate(\n      need(length(getData()[[2]])>1, \"Requires 2 or more exposure variables.\")\n    )\n    corr<-getCorr()\n    rownames(corr)<-corr$metabolite_name\n    ncols<-length(getData()[[2]])\n    d3heatmap(\n      corr[,1:ncols],\n      colors = input$palette,\n      dendrogram = if (input$cluster) \"both\" else \"none\"\n    )\n  })\n\n\n  #----------------------------------------------------------------\n  # pass integrity checks\n  #----------------------------------------------------------------\n  observe({\n    if (length(input$file1)==0){\n      shinyjs::hide(\"advanced\")\n      return(NULL)\n\n    }\n    tst<-readData()$integritymessage\n\n    if (grepl('Error',readData()$integritymessage)==FALSE) {\n      shinyjs::show(\"advanced\")\n    }\n  })\n\n\n  #----------------------------------------------------------------\n  # pass integrity checks\n  #----------------------------------------------------------------\n  observe({\n    if (length(input$file1)==0){\n      shinyjs::hide(\"advcorr\")\n      return(NULL)\n    }\n    else\n      shinyjs::show(\"advcorr\")\n  })\n\n})\n",
    "created" : 1468434640345.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2972027291",
    "id" : "C56A1EB0",
    "lastKnownWriteTime" : 1468435274,
    "last_content_update" : 1468435274803,
    "path" : "~/comets/comets/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}