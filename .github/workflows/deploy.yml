name: Deploy
on:
  workflow_dispatch:
    inputs:
      tier:
        description: "Tier to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - qa
          - stage
          - prod

env:
  APP: comets-analytics
  TZ: America/New_York
  AWS_REGION: us-east-1
  TASK_DEFINITION_TEMPLATE_PATH: aws
  DOCKER_BUILDKIT: 1

permissions:
  id-token: write
jobs:
  Deploy:
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    environment: ${{ inputs.tier }}
    env:
      FRONTEND_CONTAINER_PORT: 80
      BACKEND_CONTAINER_PORT: 8000
      TIER: ${{ inputs.tier }}
      IMAGE_TIER: ${{ contains(fromJson('["dev","qa"]'), inputs.tier) && 'development' || 'release' }}
      ECS_WEB_CPU_UNITS: "2 vCPU"
      ECS_WEB_MEMORY_UNITS: "4 GB"
      ECS_WORKER_CPU_UNITS: "4 vCPU"
      ECS_WORKER_MEMORY_UNITS: "16 GB"

    steps:
      - uses: "actions/checkout@v5"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.CICD_ROLE_ARN }}
          role-session-name: ${{ env.TIER }}-comets-analytics-deploy-${{ github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set dynamic environment variables
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          VERSION=$(echo "$BRANCH_NAME" | awk -F'_' '{print $2}')
          DATE=$(echo "$BRANCH_NAME" | awk -F'_' '{print $3}')
          echo "VERSION=${VERSION:-unknown_version}" >> $GITHUB_ENV
          echo "DATE=${DATE:-unknown_date}" >> $GITHUB_ENV

          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$APP
          echo "IMAGE_REPOSITORY=$REPO" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$REPO:$IMAGE_TIER-frontend-${{ github.ref_name }}-$TIMESTAMP" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=$REPO:$IMAGE_TIER-backend-${{ github.ref_name }}-$TIMESTAMP" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_LATEST=$REPO:$IMAGE_TIER-frontend-${{ github.ref_name }}-latest" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_LATEST=$REPO:$IMAGE_TIER-backend-${{ github.ref_name }}-latest" >> $GITHUB_ENV
          echo "PARAMETER_PATH=/analysistools/${TIER}/${APP}" >> $GITHUB_ENV
          echo "ENVIRONMENT_TIER=${TIER^^}" >> $GITHUB_ENV

      - uses: dkershner6/aws-ssm-getparameters-action@v2
        with:
          parameterPairs: |
            ${{ env.PARAMETER_PATH }}/ecs_cluster = ECS_CLUSTER,
            ${{ env.PARAMETER_PATH }}/ecs_web_task = ECS_WEB_TASK,
            ${{ env.PARAMETER_PATH }}/ecs_web_task_cpu_units = ECS_WEB_TASK_CPU_UNITS,
            ${{ env.PARAMETER_PATH }}/ecs_web_task_memory_units = ECS_WEB_TASK_MEMORY_UNITS,
            ${{ env.PARAMETER_PATH }}/ecs_web_service = ECS_WEB_SERVICE,
            ${{ env.PARAMETER_PATH }}/worker/ecs_task = ECS_WORKER_TASK,
            ${{ env.PARAMETER_PATH }}/role_arn = ROLE_ARN,
            ${{ env.PARAMETER_PATH }}/efs_filesystem_id = EFS_FILESYSTEM_ID,
            ${{ env.PARAMETER_PATH }}/efs_access_point_id = EFS_ACCESS_POINT_ID
          withDecryption: "true"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and use a new builder instance
        run: |
          docker buildx create --name mybuilder --use

      - name: Build backend image ${{ env.BACKEND_IMAGE }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/backend.dockerfile
          pull: true
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}
            ${{ env.BACKEND_IMAGE_LATEST }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPOSITORY }}:backend-cache
          cache-to: type=registry,ref=${{ env.IMAGE_REPOSITORY }}:backend-cache,image-manifest=true,oci-mediatypes=true,mode=max

      - name: Build frontend image ${{ env.FRONTEND_IMAGE }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/frontend.dockerfile
          pull: true
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}
            ${{ env.FRONTEND_IMAGE_LATEST }}
          build-args: |
            APP_VERSION=${{ github.ref_name }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPOSITORY }}:frontend-cache
          cache-to: type=registry,ref=${{ env.IMAGE_REPOSITORY }}:frontend-cache,image-manifest=true,oci-mediatypes=true,mode=max

      - name: Set LOG_LEVEL based on tier
        run: |
          if [[ "$TIER" == "dev" ]]; then
            echo "LOG_LEVEL=debug" >> $GITHUB_ENV
          else
            echo "LOG_LEVEL=info" >> $GITHUB_ENV
          fi

      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Substitute web task definition variables
        id: substitute-web-task-definition
        run: |
          echo "Substituting web task definition variables"
          envsubst < $TASK_DEFINITION_TEMPLATE_PATH/web.yml > web.yml
        env:
          ECS_WEB_TASK: ${{ env.ECS_WEB_TASK }}
          ECS_WEB_TASK_CPU_UNITS: ${{ env.ECS_WEB_TASK_CPU_UNITS }}
          ECS_WEB_TASK_MEMORY_UNITS: ${{ env.ECS_WEB_TASK_MEMORY_UNITS }}
          ROLE_ARN: ${{ env.ROLE_ARN }}
          EFS_FILESYSTEM_ID: ${{ env.EFS_FILESYSTEM_ID }}
          EFS_ACCESS_POINT_ID: ${{ env.EFS_ACCESS_POINT_ID }}
          FRONTEND_CONTAINER_PORT: ${{ env.FRONTEND_CONTAINER_PORT }}
          BACKEND_CONTAINER_PORT: ${{ env.BACKEND_CONTAINER_PORT }}
          FRONTEND_IMAGE_LATEST: ${{ env.FRONTEND_IMAGE_LATEST }}
          BACKEND_IMAGE_LATEST: ${{ env.BACKEND_IMAGE_LATEST }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TIER: ${{ env.TIER }}
          APP: ${{ env.APP }}
          ENVIRONMENT_TIER: ${{ env.ENVIRONMENT_TIER }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Print rendered web task definition
        run: |
          echo "Rendered web Task Definition:"
          cat web.yml

      - name: Register web task definition
        id: register-web
        run: |
          arn=$(aws ecs register-task-definition --cli-input-yaml file://web.yml --query "taskDefinition.taskDefinitionArn" --output text)
          echo "WEB_TASK_DEF_ARN=$arn" >> $GITHUB_ENV

      - name: Update web service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_WEB_SERVICE }} \
            --task-definition $WEB_TASK_DEF_ARN \
            --desired-count 1 \
            --propagateTags TASK_DEFINITION \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_WEB_SERVICE }}

      - name: Substitute worker task definition variables
        id: substitute-worker-task-definition
        run: |
          echo "Substituting worker task definition variables"
          envsubst < $TASK_DEFINITION_TEMPLATE_PATH/worker.yml > worker.yml
        env:
          ECS_WORKER_TASK: ${{ env.ECS_WORKER_TASK }}
          ECS_WORKER_CPU_UNITS: ${{ env.ECS_WORKER_CPU_UNITS }}
          ECS_WORKER_MEMORY_UNITS: ${{ env.ECS_WORKER_MEMORY_UNITS }}
          ROLE_ARN: ${{ env.ROLE_ARN }}
          EFS_FILESYSTEM_ID: ${{ env.EFS_FILESYSTEM_ID }}
          EFS_ACCESS_POINT_ID: ${{ env.EFS_ACCESS_POINT_ID }}
          BACKEND_CONTAINER_PORT: ${{ env.BACKEND_CONTAINER_PORT }}
          BACKEND_IMAGE_LATEST: ${{ env.BACKEND_IMAGE_LATEST }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TIER: ${{ env.TIER }}
          APP: ${{ env.APP }}
          ENVIRONMENT_TIER: ${{ env.ENVIRONMENT_TIER }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}

      - name: Print rendered worker task definition
        run: |
          echo "Rendered Worker Task Definition:"
          cat worker.yml

      - name: Register worker task definition
        run: aws ecs register-task-definition --cli-input-yaml file://worker.yml

      - name: Remove old task definitions
        run: |
          for family in "$ECS_WEB_TASK" "$ECS_WORKER_TASK"; do
            echo "Pruning old revisions for family: $family"
            aws ecs list-task-definitions --family-prefix "$family" --sort DESC --query 'taskDefinitionArns[3:]' --output text \
              | xargs -n1 -r aws ecs deregister-task-definition --task-definition
          done
